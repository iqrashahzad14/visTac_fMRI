2+2
3+4
I=1;
Q=2;
R=I+Q;
R
who
help(package = car)
c(2, 4, -1)
A=c(2, 4, -1);
A=c(2, 4, -1)
B=c("e", 2);
F=c(1, 5/6, 2^3, -.05);
seq(from=1, to=7, by = 1)
seq(from=1, to=7, length.out = 10)
help("seq")
rep(1,10)
seq(from=1, to=7, by = 0.2)
rep("a", 5)
rep(c("group1","group2"), c(2,3))
rep(c("groupe1","groupe2"), each=2)
x <- c(2.1, 5, -4, 1, 5)
c(2.1, 5, -4, 1, 5) -> x1
rep(c("group1","group2"), 2)
x<-(1,2,3,4,5)
x<-c(1,2,3,4,5)
x[3]
x[-3]
x[-4]
x[-c(2,3)]
x[c(-2,-3)]
x[c(1:3)]
[c(1:3)]
x[c(1,2,4)]
x[c(TRUE, TRUE, FALSE, TRUE, FALSE)]
x[<-3]
x[c(3)]<-2
x]
x
assign("x3", c(2.1, 5, -4, 1, 5))
x3
x[c(TRUE, TRUE, FALSE, TRUE, FALSE)]
class(x)
is(x)
is.numeric(x)
x_char <- as.character(x)
rm(list = ls())
x=c(1,2,3,4,5)
x_char <- as.character(x)
x_char
as.numeric(x_char)
as.numeric(c(x_char, "ads"))
x_char
c(x_char, "ads")
as.numeric(c(x_char, "ads"))
a<-1
a
b<-9
c=a+b
c
install.packages("car"); install.packages("ggplot2"); install. packages("nlme"); install.packages("reshape")
install.packages("car"); install.packages("ggplot2"); install.packages("nlme"); install.packages("reshape")
library(car); library(ggplot2); library(nlme); library(reshape)
x<-1
print(x)
msg<-"hello"
print(msg)
x
msg
x<-1:20
x
vecto()
vector()
attributes(x)
attributes(msg)
# Plot a line between subjects over two conditions within the same cateogory plotted on x
#
# To improve: the points are not filled with white to cover the below line :()
#
# # (C) Copyright 2021 Marco Barilari
# Prepare some mock data
emo_standardVsScramble <- data.frame(
SubjID = rep(c('Subj1', 'Subj2'), 10),
Condition = rep(c('Standard', 'Scramble'), each = 10),
Emotion = rep(rep(c('Anger', 'Disgust', 'Fear', 'Happy', 'Sad'), each = 2), 2),
d_prime = c(round(runif(10, 1.5, 2.5), 2), round(runif(10, -0.5, 1.5), 2)))
# Here the numbers needs to be adjusted according to the "size" od your data:
# this is to reorder the conditions (Standard is plotted on the left)
emo_standardVsScramble$orderCond <- rep(1:2, each = 10)
# this is to group the data to draw the lines, same value per subjX and emotion across conditions
# eg Subj1 has the same value '1' for the same emotion for Standard and Scramble
emo_standardVsScramble$orderCondPerSubj <- rep(1:10, 2)
# Here you plot
ggplot(emo_standardVsScramble,
aes( x = as.numeric(interaction(reorder(Condition, orderCond), Emotion)),
y = d_prime,
shape = Condition,
colour = Emotion)) +
geom_line(group = emo_standardVsScramble$orderCondPerSubj,
size = 1,
show.legend = F) +
geom_point(size = 6,
show.legend = T,
fill = "white",
stroke = 1.5) +
scale_shape_manual(values = c(1, 2), breaks=c('Standard', 'Scramble')) +
theme_classic() +
scale_x_continuous( breaks = c(1.5, 3.5, 5.5, 7.5, 9.5),
labels = levels(emo_standardVsScramble$Emotion)) +
guides(col = FALSE) +
xlab('')+
ylab("d'")+
ggtitle('Isolation task') +
theme(
text=element_text(size=20),
legend.position = 'right',
legend.text=element_text(size=18),
axis.line.y = element_line(size = 1),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(size=17,colour="black"),
axis.text.y = element_text(size=17, colour='black'))
library(ggplot2)
# Plot a line between subjects over two conditions within the same cateogory plotted on x
#
# To improve: the points are not filled with white to cover the below line :()
#
# # (C) Copyright 2021 Marco Barilari
library(ggplot2)
# Prepare some mock data
emo_standardVsScramble <- data.frame(
SubjID = rep(c('Subj1', 'Subj2'), 10),
Condition = rep(c('Standard', 'Scramble'), each = 10),
Emotion = rep(rep(c('Anger', 'Disgust', 'Fear', 'Happy', 'Sad'), each = 2), 2),
d_prime = c(round(runif(10, 1.5, 2.5), 2), round(runif(10, -0.5, 1.5), 2)))
# Here the numbers needs to be adjusted according to the "size" od your data:
# this is to reorder the conditions (Standard is plotted on the left)
emo_standardVsScramble$orderCond <- rep(1:2, each = 10)
# this is to group the data to draw the lines, same value per subjX and emotion across conditions
# eg Subj1 has the same value '1' for the same emotion for Standard and Scramble
emo_standardVsScramble$orderCondPerSubj <- rep(1:10, 2)
# Here you plot
ggplot(emo_standardVsScramble,
aes( x = as.numeric(interaction(reorder(Condition, orderCond), Emotion)),
y = d_prime,
shape = Condition,
colour = Emotion)) +
geom_line(group = emo_standardVsScramble$orderCondPerSubj,
size = 1,
show.legend = F) +
geom_point(size = 6,
show.legend = T,
fill = "white",
stroke = 1.5) +
scale_shape_manual(values = c(1, 2), breaks=c('Standard', 'Scramble')) +
theme_classic() +
scale_x_continuous( breaks = c(1.5, 3.5, 5.5, 7.5, 9.5),
labels = levels(emo_standardVsScramble$Emotion)) +
guides(col = FALSE) +
xlab('')+
ylab("d'")+
ggtitle('Isolation task') +
theme(
text=element_text(size=20),
legend.position = 'right',
legend.text=element_text(size=18),
axis.line.y = element_line(size = 1),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(size=17,colour="black"),
axis.text.y = element_text(size=17, colour='black'))
1-(1/0.23)
1/0.23
1/3.34
sqrt
sqrt(1/3.34)
1/0.68
1/sqrt(0.47)
1/0.68
1.470588-1
sqrt(0.47)
1/0.68
install.packages("pwr")
library(pwr)
d
d<-2/2.8
pwr.t.test(d=d,n=30,sig.level=0.05,type="two.sample",alternative="two.sided")
d
d=1.48
pwr.t.test(d=d,n=30,sig.level=0.05,type="two.sample",alternative="two.sided")
d=1.48
pwr.t.test(d=d,sig.level=0.05,power = 0.9 type="two.sample",alternative="two.sided")
d=1.48
pwr.t.test(d=d,sig.level=0.05,power = 0.9,type="two.sample",alternative="two.sided")
d=1.65
pwr.t.test(d=d,sig.level=0.05,power = 0.9,type="two.sample",alternative="two.sided")
d=0.28
pwr.t.test(d=d,sig.level=0.05,power = 0.9,type="two.sample",alternative="two.sided")
d=0.56
pwr.t.test(d=d,sig.level=0.05,power = 0.9,type="two.sample",alternative="two.sided")
citation()
setwd("/Volumes/IqraMacFmri/visTac/fMRI_analysis/code/betaExtraction/stats_R")
install.packages("readxl")
library(readxl)
setwd("/Volumes/IqraMacFmri/visTac/fMRI_analysis/code/betaExtraction/stats_R")
myData<-read_excel(path = "betaVal_sphereRoi_Vml.xlsx")
View(myData)
View(myData)
myData<-read_excel(path = "betaVal_sphereRoi_Vml.xlsx",col_names = TRUE)
myData<-read_excel(path = "betaVal_sphereRoi_Vml.xlsx",skip=1)
View(myData)
myData<-read_excel(path = "betaVal_sphereRoi_Vml.xlsx")
View(myData)
View(myData)
View(myData)
View(myData)
#checking assumptions
# checking for normality
qqnorm(myData$lS1_Motion)
qqline(myData$lS1_Static)
# test of normality
# H0: normal distribution; H1: not a normal distribution
#to reject H0 and accept H1, we should have p<0.05
#to accept H0 and reject H1, we should have p>0.05 => it is normal
shapiro.test(myData$lS1_Motion)
shapiro.test(myData$lS1_Static)$p.value
qqnorm(myData$lMTt_Motion)
qqline(myData$lMTt_Static)
shapiro.test(myData$lMTt_Motion)
shapiro.test(myData$lMTt_Static)$p.value
qqnorm(myData$rMTt_Motion)
qqline(myData$rMTt_Static)
shapiro.test(myData$rMTt_Motion)
shapiro.test(myData$rMTt_Static)$p.value
qqnorm(myData$lhMT_Motion)
qqline(myData$lhMT_Static)
shapiro.test(myData$lhMT_Motion)
shapiro.test(myData$lhMT_Static)$p.value
qqnorm(myData$rhMT_Motion)
qqline(myData$rhMT_Static)
shapiro.test(myData$rhMT_Motion)
shapiro.test(myData$rhMT_Static)$p.value
qqnorm(myData$lMTt_Motion)
qqline(myData$lMTt_Motion)
shapiro.test(myData$lMTt_Motion)
shapiro.test(myData$lMTt_Motion)$p.value
qqnorm(myData$lMTt_Static)
qqline(myData$lMTt_Static)
shapiro.test(myData$lMTt_Static)
shapiro.test(myData$lMTt_Static)$p.value
qqnorm(myData$rMTt_Motion)
qqline(myData$rMTt_Motion)
shapiro.test(myData$rMTt_Motion)
shapiro.test(myData$rMTt_Motion)$p.value
qqnorm(myData$rMTt_Static)
qqline(myData$rMTt_Static)
shapiro.test(myData$rMTt_Static)
shapiro.test(myData$rMTt_Static)$p.value
qqnorm(myData$lhMT_Motion)
qqline(myData$lhMT_Motion)
shapiro.test(myData$lhMT_Motion)
shapiro.test(myData$lhMT_Motion)$p.value
qqnorm(myData$lhMT_Static)
qqline(myData$lhMT_Static)
shapiro.test(myData$lhMT_Static)
shapiro.test(myData$lhMT_Static)$p.value
qqnorm(myData$rhMT_Motion)
qqline(myData$rhMT_Motion)
shapiro.test(myData$rhMT_Motion)
shapiro.test(myData$rhMT_Motion)$p.value
qqnorm(myData$rhMT_Static)
qqline(myData$rhMT_Static)
shapiro.test(myData$rhMT_Static)
shapiro.test(myData$rhMT_Static)$p.value
t.test(myData$lS1_Motion, mu = 0)
t.test(myData$lhMT_Motion, mu = 0)
#one-sample t-test
t.test(myData$lS1_Motion, mu = 0)
t.test(myData$lS1_Static, mu = 0)
t.test(myData$lMTt_Motion, mu = 0)
t.test(myData$lMTt_Static, mu = 0)
t.test(myData$rMTt_Motion, mu = 0)
t.test(myData$rMTt_Static, mu = 0)
t.test(myData$lhMT_Motion, mu = 0)
t.test(myData$lhMT_Static, mu = 0)
t.test(myData$rhMT_Motion, mu = 0)
t.test(myData$rhMT_Static, mu = 0)
#paired -ttest
t.test(lS1_Motion, lS1_Static, paired = TRUE, alternative = "two.sided")
#paired -ttest
t.test(myData$lS1_Motion, myData$lS1_Static, paired = TRUE, alternative = "two.sided")
#paired -ttest
t.test(myData$lS1_Motion, myData$lS1_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$lMTt_Motion, myData$lMTt_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$rMTt_Motion, myData$rMTt_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$lhMT_Motion, myData$lhMT_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$rhMT_Motion, myData$rhMT_Static, paired = TRUE, alternative = "two.sided")
myData<-read_excel(path = "betaVal_sphereRoi_Tml.xlsx")
#checking assumptions
# checking for normality
qqnorm(myData$lS1_Motion)
qqline(myData$lS1_Motion)
# test of normality
# H0: normal distribution; H1: not a normal distribution
#to reject H0 and accept H1, we should have p<0.05
#to accept H0 and reject H1, we should have p>0.05 => it is normal
shapiro.test(myData$lS1_Motion)
shapiro.test(myData$lS1_Motion)$p.value
qqnorm(myData$lS1_Static)
qqline(myData$lS1_Static)
shapiro.test(myData$lS1_Static)
shapiro.test(myData$lS1_Static)$p.value
qqnorm(myData$lMTt_Motion)
qqline(myData$lMTt_Motion)
shapiro.test(myData$lMTt_Motion)
shapiro.test(myData$lMTt_Motion)$p.value
qqnorm(myData$lMTt_Static)
qqline(myData$lMTt_Static)
shapiro.test(myData$lMTt_Static)
shapiro.test(myData$lMTt_Static)$p.value
qqnorm(myData$rMTt_Motion)
qqline(myData$rMTt_Motion)
shapiro.test(myData$rMTt_Motion)
shapiro.test(myData$rMTt_Motion)$p.value
qqnorm(myData$rMTt_Static)
qqline(myData$rMTt_Static)
shapiro.test(myData$rMTt_Static)
shapiro.test(myData$rMTt_Static)$p.value
qqnorm(myData$lhMT_Motion)
qqline(myData$lhMT_Motion)
shapiro.test(myData$lhMT_Motion)
shapiro.test(myData$lhMT_Motion)$p.value
qqnorm(myData$lhMT_Static)
qqline(myData$lhMT_Static)
shapiro.test(myData$lhMT_Static)
shapiro.test(myData$lhMT_Static)$p.value
qqnorm(myData$rhMT_Motion)
qqline(myData$rhMT_Motion)
shapiro.test(myData$rhMT_Motion)
shapiro.test(myData$rhMT_Motion)$p.value
qqnorm(myData$rhMT_Static)
qqline(myData$rhMT_Static)
shapiro.test(myData$rhMT_Static)
shapiro.test(myData$rhMT_Static)$p.value
#one-sample t-test
t.test(myData$lS1_Motion, mu = 0)
t.test(myData$lS1_Static, mu = 0)
t.test(myData$lMTt_Motion, mu = 0)
t.test(myData$lMTt_Static, mu = 0)
t.test(myData$rMTt_Motion, mu = 0)
t.test(myData$rMTt_Static, mu = 0)
t.test(myData$lhMT_Motion, mu = 0)
t.test(myData$lhMT_Static, mu = 0)
t.test(myData$lhMT_Motion, mu = 0)
t.test(myData$lhMT_Static, mu = 0)
t.test(myData$rhMT_Motion, mu = 0)
t.test(myData$rhMT_Static, mu = 0)
#paired -ttest
t.test(myData$lS1_Motion, myData$lS1_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$lMTt_Motion, myData$lMTt_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$rMTt_Motion, myData$rMTt_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$lhMT_Motion, myData$lhMT_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$rhMT_Motion, myData$rhMT_Static, paired = TRUE, alternative = "two.sided")
myData<-read_excel(path = "betaVal_clusterRoi_Tml.xlsx")
View(myData)
t.test(myData$rMT_Motion, mu = 0)
myData<-read_excel(path = "betaVal_clusterRoi_Tml.xlsx")
#checking assumptions
# checking for normality
qqnorm(myData$lMst_Motion)
qqline(myData$lMst_Motion)
# test of normality
# H0: normal distribution; H1: not a normal distribution
#to reject H0 and accept H1, we should have p<0.05
#to accept H0 and reject H1, we should have p>0.05 => it is normal
shapiro.test(myData$lMst_Motion)
shapiro.test(myData$lMst_Motion)$p.value
qqnorm(myData$lMst_Static)
qqline(myData$lMst_Static)
shapiro.test(myData$lMst_Static)
shapiro.test(myData$lMst_Static)$p.value
qqnorm(myData$lMT_Motion)
qqline(myData$lMT_Motion)
shapiro.test(myData$lMT_Motion)
shapiro.test(myData$lMT_Motion)$p.value
qqnorm(myData$lMT_Static)
qqline(myData$lMT_Static)
shapiro.test(myData$lMT_Static)
shapiro.test(myData$lMT_Static)$p.value
qqnorm(myData$lhMT_Motion)
qqline(myData$lhMT_Motion)
shapiro.test(myData$lhMT_Motion)
shapiro.test(myData$lhMT_Motion)$p.value
qqnorm(myData$lhMT_Static)
qqline(myData$lhMT_Static)
shapiro.test(myData$lhMT_Static)
shapiro.test(myData$lhMT_Static)$p.value
##
qqnorm(myData$rMst_Motion)
qqline(myData$rMst_Motion)
shapiro.test(myData$rMst_Motion)
shapiro.test(myData$rMst_Motion)$p.value
qqnorm(myData$rMst_Static)
qqline(myData$rMst_Static)
shapiro.test(myData$rMst_Static)
shapiro.test(myData$rMst_Static)$p.value
qqnorm(myData$rMT_Motion)
qqline(myData$rMT_Motion)
shapiro.test(myData$rMT_Motion)
shapiro.test(myData$rMT_Motion)$p.value
qqnorm(myData$rMT_Static)
qqline(myData$rMT_Static)
shapiro.test(myData$rMT_Static)
shapiro.test(myData$rMT_Static)$p.value
qqnorm(myData$rhMT_Motion)
qqline(myData$rhMT_Motion)
shapiro.test(myData$rhMT_Motion)
shapiro.test(myData$rhMT_Motion)$p.value
qqnorm(myData$rhMT_Static)
qqline(myData$rhMT_Static)
shapiro.test(myData$rhMT_Static)
shapiro.test(myData$rhMT_Static)$p.value
#one-sample t-test
t.test(myData$lMst_Motion, mu = 0)
t.test(myData$lMst_Static, mu = 0)
t.test(myData$lMT_Motion, mu = 0)
t.test(myData$lMT_Static, mu = 0)
t.test(myData$lhMT_Motion, mu = 0)
t.test(myData$lhMT_Static, mu = 0)
t.test(myData$rMst_Motion, mu = 0)
t.test(myData$rMst_Static, mu = 0)
t.test(myData$rMT_Motion, mu = 0)
t.test(myData$rMT_Static, mu = 0)
t.test(myData$rhMT_Motion, mu = 0)
t.test(myData$rhMT_Static, mu = 0)
#paired -ttest
t.test(myData$lMst_Motion, myData$lMst_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$lMT_Motion, myData$lMT_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$lhMT_Motion, myData$lhMT_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$rMst_Motion, myData$rMst_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$rMT_Motion, myData$rMT_Static, paired = TRUE, alternative = "two.sided")
t.test(myData$rhMT_Motion, myData$rhMT_Static, paired = TRUE, alternative = "two.sided")
library(openxlsx) # import excel file
library(reshape2) # reshape data
library(ggplot2) # plots
library(lmerTest) # linear mixed model
library(emmeans) # multiple comparisons
donnees <- read.xlsx("betaVal_sphereRoi_Tml_copy.xlsx")
donnees$subID <- factor(donnees$subID)
donnees <- read.xlsx("betaVal_sphereRoi_Tml_copy.xlsx")
donnees$subID <- factor(donnees$subID)
donnees <- melt(donnees)
donnees$FoR <- sub("_.*", "", donnees$variable)
donnees$ROI <- sub(".*_", "", donnees$variable)
View(donnees)
write.xlsx(donnees, file = "data_longFormat.xlsx")
donnees$FoR
donnees$ROI <- sub("_.*", "", donnees$variable)
donnees$CONDITIONS <- sub(".*_", "", donnees$variable)
donnees$roi <- sub("_.*", "", donnees$variable)
donnees$condition <- sub(".*_", "", donnees$variable)
ggplot(donnees, aes(x = condition, y = value, fill = roi)) + geom_boxplot()
res <- lmer(value ~ roi*condition + (1|subID), data = donnees)
ggplot(donnees, aes(x = roi, y = value, fill = condition)) + geom_boxplot()
res <- lmer(value ~ condition*roi + (1|subID), data = donnees)
plot(res) # homoscedasticity fine
qqnorm(residuals(res))
qqline(residuals(res))
qqnorm(ranef(res)$subID[,1])
qqline(ranef(res)$subID[,1])
# multiple comparisons
multComp <- contrast(emmeans(res, ~condition:roi), method = "pairwise", simple = "each", combine = TRUE, adjust = "holm")
plot(multComp) +
geom_vline(xintercept = 0, linetype = "dotted")
emmip(res, condition ~ roi, CIs = TRUE)
emmip(res, roi ~ condition | condition, CIs = TRUE)
res <- lmer(value ~ condition*roi + (1|subID), data = donnees)
res
View(res)
summary(res)
anova(res)
